buildscript {
    ext {
        kotlinVersion = '1.3.21'
        kotlinLoggingVersion = '1.6.10'
        kotlinLinterVersion = '1.4.0'
        kafkaVersion = '2.0.0'
        shadowJarVersion = '4.0.4'
        junitVersion = '5.4.0'
        prometheusVersion = '0.5.0'
        jfrogBuildExtractorVersion = '4.5.4'
        picocliVersion = '3.9.3'
        mordantVersion = '1.2.0'
        slf4jVersion = '1.7.25'
        konfVersion = '0.13.1'
        mockkVersion = '1.9.1'
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jfrog.buildinfo:build-info-extractor-gradle:${jfrogBuildExtractorVersion}")
    }
    repositories {
        mavenCentral()
        jcenter()
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version "1.3.21"
    id 'com.github.johnrengelman.shadow' version "4.0.4"
    id 'com.adarshr.test-logger' version '1.3.1'
    id 'com.palantir.git-version' version '0.12.0-rc2'
    id 'io.gitlab.arturbosch.detekt' version '1.0.0-RC13'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.4"
    id 'java-library'
    id 'com.google.cloud.tools.jib' version '1.0.0'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.2'
}

detekt {
    toolVersion = "1.0.0-RC13"
    input = files("src/main/kotlin")
    filters = ".*/resources/.*,.*/build/.*"
}


group 'com.omarsmak.kafka.consumer.lag.monitoring'
version gitVersion()

apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'application'

ext {
    libraryName = "kafka-consumer-lag-monitoring"

    bintrayRepo = "kafka"
    bintrayName = "consumer-lag-monitoring"

    publishingGroupId = "com.omarsmak.kafka"
    publishingArtifactId = "consumer-lag-monitoring"
    libraryVersion = version

    libraryDescription = "Client tool that exports the consumer lag of Kafka consumer groups to Prometheus or your terminal"
    sitUrl = "https://github.com/omarsmak/kafka-consumer-lag-monitoring"
    gitUrl = "https://github.com/omarsmak/kafka-consumer-lag-monitoring.git"
    developerId = "omarsmak"
    developerName = "Omar Al-Safi"
    developerEmail = "omarsmak@gmail.com"
    licenceName = "The MIT License"
    licenseUrl = "https://opensource.org/licenses/MIT"
    libraryLicences = ['MIT']
}


mainClassName = 'com.omarsmak.kafka.consumer.lag.monitoring.MainKt'

shadowJar {
    zip64 = true
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allSource
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourceJar
    archives javadocJar
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    compile "org.apache.kafka:kafka-clients:$kafkaVersion"
    compile "io.prometheus:simpleclient:$prometheusVersion"
    compile "io.prometheus:simpleclient_hotspot:$prometheusVersion"
    compile "io.prometheus:simpleclient_httpserver:$prometheusVersion"
    compile "io.github.microutils:kotlin-logging:$kotlinLoggingVersion"
    compile "com.github.ajalt:mordant:$mordantVersion"
    compile "info.picocli:picocli:$picocliVersion"
    compile "org.slf4j:slf4j-simple:$slf4jVersion"
    compile "com.uchuhimo:konf:$konfVersion"
    compile group: 'org.reflections', name: 'reflections', version: '0.9.10'



    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "io.mockk:mockk:${mockkVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
}

test {
    useJUnitPlatform()
}

shadowJar {
    zip64 = true
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')
    publications = ['mavenPublication']
    
    pkg {
        repo = bintrayRepo
        name = bintrayName
        userOrg = developerId
        vcsUrl = gitUrl
        licenses = ['MIT']
        version {
            name = libraryVersion
            desc = libraryDescription
            released = new Date()
        }
    }
}

// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name licenceName
            url licenseUrl
            distribution "repo"
        }
    }
    developers {
        developer {
            id developerId
            name developerName
            email developerEmail
        }
    }

    scm {
        url gitUrl
    }
}

// Create the publication with the pom configuration:
publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            artifact sourceJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            groupId publishingGroupId
            artifactId publishingArtifactId
            version libraryVersion
            pom{
                withXml {
                    def root = asNode()
                    root.appendNode('description', libraryDescription)
                    root.appendNode('name', libraryName)
                    root.appendNode('url', sitUrl)
                    root.children().last() + pomConfig
                }
            }
        }
    }
}

jib {
    from.image 'gcr.io/distroless/java:11'
    to{
        image = "omarsmak" + "/" + libraryName
        tags = [libraryVersion, "latest"]
        auth {
            username = System.getenv('DOCKERHUB_USER')
            password = System.getenv('DOCKERHUB_PASSWORD')
        }
    }
    container {
        ports = ["9000"]
        jvmFlags = [
                "-XX:+UseCompressedOops",
                "-XX:MaxRAMPercentage=80",
                "-Dfile.encoding=UTF-8",
                "-Djava.security.egd=file:/dev/./urandom"
        ]
    }
}

jacoco {
    toolVersion = "0.8.3"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
    }
}

coveralls {
    // Workaround for kotlin support
    sourceDirs = files(sourceSets.main.kotlin.srcDirs).files.absolutePath
    jacocoReportPath "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
}